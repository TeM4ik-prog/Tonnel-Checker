generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRoles {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id             String    @id @default(uuid())
  telegramId     Int       @unique
  username       String
  lastName       String?
  firstName      String?
  authTonnelData String?
  role           UserRoles @default(USER)

  hasAccess     Boolean        @default(false)
  AccessRequest AccessRequest?

  messages      GoodPriceMessage[]
  UsersConfig   UsersConfig        @relation(fields: [usersConfigId], references: [id])
  usersConfigId String

  PackGiftsDataUpdate PackGiftsDataUpdate[]
}

model UsersConfig {
  id     String @id @default(uuid())
  userId String @unique

  filters   Filter[]
  minProfit Float    @default(0.5)
  User      User[]
}

model Filter {
  id String @id @default(uuid())

  nft         String
  models      Json
  backgrounds Json
  symbols     Json

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  UsersConfig   UsersConfig @relation(fields: [usersConfigId], references: [id])
  usersConfigId String
}

// _____________

model Gift {
  id       Int    @id @default(autoincrement())
  giftId   Int
  giftNum  Int
  name     String
  price    Float
  model    String
  symbol   String
  backdrop String


  giftMessages GoodPriceMessage[]

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  GiftsDataUpdate   GiftsDataUpdate? @relation(fields: [giftsDataUpdateId], references: [id], onUpdate: Cascade)
  giftsDataUpdateId String?
}

model GiftsDataUpdate {
  id    String @id @default(uuid())
  Gifts Gift[]

  profit    Float
  sellPrice Float
  
  filterLink String


  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @default(now())
  PackGiftsDataUpdate   PackGiftsDataUpdate? @relation(fields: [packGiftsDataUpdateId], references: [id], onUpdate: Cascade)
  packGiftsDataUpdateId String?
}

model PackGiftsDataUpdate {
  id String @id @default(uuid())

  GiftsDataUpdate GiftsDataUpdate[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  updatedAt DateTime @default(now())
}

// _____________----

model ActiveChat {
  id             Int @id @default(autoincrement())
  userTelegramId Int @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GoodPriceMessage {
  id        String @id @default(uuid())
  chatId    Int
  messageId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hidden Boolean @default(false)

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  Gift   Gift @relation(fields: [giftId], references: [id], onDelete: Cascade)
  giftId Int

  @@unique([chatId, messageId])
}

model AccessRequest {
  id         String        @id @default(uuid())
  telegramId Int
  user       User          @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([telegramId])
}

// ______________

model GiftModel {
  id String @id @default(uuid())

  name        String @unique
  models      Json
  backgrounds Json
  symbols     Json
}

model GiftBackground {
  id       String @id @default(uuid())
  backdrop String

  centerColor  Int
  edgeColor    Int
  patternColor Int
  textColor    Int
  name         String
  permille     Int
}
